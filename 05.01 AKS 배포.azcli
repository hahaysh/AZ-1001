## [스크립트를 한줄씩 적용하면서 확인]
## AKS 클러스터 배포

## [먼저 리소스 그룹을 생성하고 환경 변수를 정리합니다. ]
# 리소스 그룹 생성
AKSRG='aks-01-RG'
LOCATION='eastus'
az group create --name $AKSRG --location $LOCATION

## [AKS를 기존에 있는것을 써도 좋겠지만, 경우의 수를 줄이기 위해서 새로 만들어도 괜찮을것 같습니다. 생성에 시간이 약간 소요 됩니다. Manageid를 활성화하고 노드는 1개짜리로 생성합니다.]# AKS 클러스터 생성(시간 걸림)
AKSNAME='aks-01'
az aks create --resource-group $AKSRG --name $AKSNAME --enable-managed-identity --node-count 1 --generate-ssh-keys

## [생성한 AKS에 첫번째 할것은 연결정보 가지고 오는거구요,]
# AKS 클러스터 연결
az aks get-credentials --resource-group $AKSRG --name $AKSNAME

## [확인을 위해서 가볍게 노드를 조회보면 될것 같구요, 우리는 1개짜리 노드로 AKS를 만들었습니다.]
# 연결 확인
kubectl get nodes
## AKS용 Azure Policy 추가 기능 설치

## [Azure Policy를 쓰기 위한 리소스 공급자 등록이 필요합니다. 대부분의 경우 사전에 등록이 되어 있지만, 확인하고 등록해보겠습니다.]
# Azure Policy Insights 확장 확인 및 설치
az provider register --namespace Microsoft.PolicyInsights
az provider show --namespace Microsoft.PolicyInsights --output table

## [설치전에 네임스페이스 목록으로 확인합니다.]
# 현재 네임스페이스 목록 조회
kubectl get namespace

## [AKS에 Azure Policy addon을 활성화 합니다. 포탈에서도 동일하게 설정을 간단하게 구성할 수 있습니다. 콘솔에서 작업을 하게 되면 대체로 콘솔에서 전부 처리하게 되는 것 같습니다.]# AKS 클러스터에 Azure Policy 추가 기능 활성화(포탈에서 먼저 확인, 시간 걸림)
az aks enable-addons --addons azure-policy --name $AKSNAME --resource-group $AKSRG

## [활성화가 되면, gatekeeper 네임스페이스가 생성이 되고, 관련 구성요소들이 위치하게 됩니다.]
# azure-policy 및 gatekeeper Pod가 작동하는지 유효성을 검사
kubectl get pods --namespace kube-system
kubectl get pods --namespace gatekeeper-system

## [add on도 잘 활성화가 된것 같고, AKS에 적용된 제약 조건들도 확인 해봅니다. Constrainttemplates 은 gatekeeper 에 의해서 사용되는 사용자 정의 리소습니다.]# 클러스터에 있는 제약조건 템플릿 확인
# constrainttemplates은 Gatekeeper에 의해 사용되는 사용자 정의 리소스
# Gatekeeper는 Kubernetes에서 정책을 강제하는 오픈 소스 프로젝트
kubectl get constrainttemplates


